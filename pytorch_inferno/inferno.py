# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/07_inferno_interp.ipynb (unless otherwise specified).

__all__ = ['VariableSoftmax', 'InfernoPred', 'VariableSoftmax', 'InfernoPred']

# Cell
from .callback import PredHandler

import numpy as np

import torch.nn as nn
from torch import Tensor

# Cell
class VariableSoftmax(nn.Softmax):
    r'''Softmax with temperature'''
    def __init__(self, temp:float=1, dim:int=-1):
        super().__init__(dim=dim)
        self.temp = temp

    def forward(self, x:Tensor) -> Tensor: return super().forward(x/self.temp)

# Cell
class InfernoPred(PredHandler):
    r'''Prediction handler for hard assignments'''
    def get_preds(self) -> np.ndarray: return np.argmax(self.preds, 1)

# Cell
from .callback import PredHandler

import numpy as np

import torch.nn as nn
from torch import Tensor

# Cell
class VariableSoftmax(nn.Softmax):
    r'''Softmax with temperature'''
    def __init__(self, temp:float=1, dim:int=-1):
        super().__init__(dim=dim)
        self.temp = temp

    def forward(self, x:Tensor) -> Tensor: return super().forward(x/self.temp)

# Cell
class InfernoPred(PredHandler):
    r'''Prediction handler for hard assignments'''
    def get_preds(self) -> np.ndarray: return np.argmax(self.preds, 1)